package otelwrap

import (
	"github.com/QuangTung97/otelwrap/internal/generate/hello"
	"context"
	"github.com/QuangTung97/otelwrap/internal/generate/hello/otel"
	"go.opentelemetry.io/otel/trace"
	"go.opentelemetry.io/otel/codes"
)

// GenericHandlerWrapper wraps OpenTelemetry's span
type GenericHandlerWrapper struct {
	hello.GenericHandler
	tracer trace.Tracer
	prefix string
}

// NewGenericHandlerWrapper creates a wrapper
func NewGenericHandlerWrapper(wrapped hello.GenericHandler, tracer trace.Tracer, prefix string) *GenericHandlerWrapper {
	return &GenericHandlerWrapper{
		GenericHandler: wrapped,
		tracer: tracer,
		prefix: prefix,
	}
}

// GetNull ...
func (w *GenericHandlerWrapper) GetNull(ctx context.Context, info hello.Null[otelgo.AnotherInfo]) (a hello.Null[otelgo.Person], err error) {
	ctx, span := w.tracer.Start(ctx, w.prefix + "GetNull")
	defer span.End()

	a, err = w.GenericHandler.GetNull(ctx, info)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
	}
	return a, err
}
