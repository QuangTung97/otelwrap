package otelwrap

import (
	"bytes"
	"context"
	"github.com/QuangTung97/otelwrap/internal/generate"
	"go/format"
	"io"
	"os"
	"path"
	"strings"
)

// Sample for testing
type Sample interface {
	Get(ctx context.Context) (int, error)
	Check() (bool, error)
}

// CommandArgs ...
type CommandArgs struct {
	Dir           string
	SrcFileName   string
	InterfaceName string
	InAnother     bool
	PkgName       string
}

func findAndGenerate(w io.Writer, args CommandArgs) error {
	values := strings.Split(args.InterfaceName, ".")

	if len(values) == 1 {
		interfaceName := values[0]
		if args.InAnother {
			return generate.LoadAndGenerate(w,
				".", interfaceName,
				generate.WithInAnotherPackage(args.PkgName),
			)
		}
		return generate.LoadAndGenerate(w,
			".", interfaceName,
		)
	}

	pkgName := values[0]
	interfaceName := values[1]

	filePath := path.Join(args.Dir, args.SrcFileName)
	findResult, err := generate.FindPackage(filePath, pkgName)
	if err != nil {
		return err
	}

	return generate.LoadAndGenerate(w,
		findResult.DestPkgPath, interfaceName,
		generate.WithInAnotherPackage(findResult.SrcPkgName),
	)
}

// RunCommand ...
func RunCommand(args CommandArgs, outFile string) error {
	var buf bytes.Buffer
	_, _ = buf.WriteString(`// Code generated by otelwrap; DO NOT EDIT.
// github.com/QuangTung97/otelwrap

`)
	err := findAndGenerate(&buf, args)
	if err != nil {
		return err
	}

	data, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	file, err := os.Create(outFile)
	if err != nil {
		return err
	}
	defer func() {
		_ = file.Close()
	}()

	_, err = file.Write(data)
	return err
}

// CheckInAnother ...
func CheckInAnother(filename string) bool {
	dir := path.Dir(filename)
	return dir != "."
}
